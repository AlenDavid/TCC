@inproceedings{article:fmricc,
  author       = {Peitek, Norman and Apel, Sven and Parnin, Chris and Brechmann, Andr{\'e} and Siegmund, Janet},
  booktitle    = {2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE)},
  organization = {IEEE},
  pages        = {524--536},
  title        = {Program comprehension and code complexity metrics: An fmri study},
  year         = {2021}
}

@inproceedings{article:complexity_with_halstead,
  title        = {Software complexity analysis using halstead metrics},
  author       = {Hariprasad, T and Vidhyagaran, G and Seenu, K and Thirumalai, Chandrasegar},
  booktitle    = {2017 International Conference on Trends in Electronics and Informatics (ICEI)},
  pages        = {1109--1113},
  year         = {2017},
  organization = {IEEE}
}

@article{article:hariprasadsoftware,
  author = {Hariprasad, T and Seenu, K and Vidhyagaran, G},
  title  = {Software Complexity Analysis Using Halstead Metrics}
}

@article{article:mozilla,
  abstract = {The literature proposes many software metrics for evaluating the source code non-functional properties, such as its complexity and maintainability. The literature also proposes several tools to compute those properties on source codes developed with many different software languages. However, the Rust language emergence has not been paired by the community's effort in developing parsers and tools able to compute metrics for the Rust source code. Also, metrics tools often fall short in providing immediate means of comparing maintainability metrics between different algorithms or coding languages. We hence introduce rust-code-analysis, a Rust library that allows the extraction of a set of eleven maintainability metrics for ten different languages, including Rust. rust-code-analysis, through the Abstract Syntax Tree (AST) of a source file, allows the inspection of the code structure, analyzing source code metrics at different levels of granularity, and finding code syntax errors before compiling time. The tool also offers a command-line interface that allows exporting the results in different formats. The possibility of analyzing source codes written in different programming languages enables simple and systematic comparisons between the metrics produced from different empirical and large-scale analysis sources.},
  author   = {Luca Ardito and Luca Barbato and Marco Castelluccio and Riccardo Coppola and Calixte Denizet and Sylvestre Ledru and Michele Valsesia},
  doi      = {https://doi.org/10.1016/j.softx.2020.100635},
  issn     = {2352-7110},
  journal  = {SoftwareX},
  keywords = {Algorithm, Software metrics, Software maintainability, Software quality},
  pages    = {100635},
  title    = {rust-code-analysis: A Rust library to analyze and extract maintainability information from source codes},
  url      = {https://www.sciencedirect.com/science/article/pii/S2352711020303484},
  volume   = {12},
  year     = {2020}
}

@article{article:rustcc,
  author    = {Ardito, Luca and Barbato, Luca and Coppola, Riccardo and Valsesia, Michele},
  journal   = {PeerJ Computer Science},
  pages     = {e406},
  publisher = {PeerJ Inc.},
  title     = {Evaluation of Rust code verbosity, understandability and complexity},
  volume    = {7},
  year      = {2021}
}

@article{article:sonarpaper,
  author  = {Campbell, G Ann},
  journal = {SonarSource SA},
  pages   = {10},
  title   = {Cognitive Complexity-A new way of measuring understandability},
  year    = {2018}
}

@book{book:hardparts,
  author    = {Neal Ford and Mark Richards and Pramod Sadalage and Zhamak Dehghani},
  edition   = {1th},
  publisher = {O'Reilly},
  title     = {Software Architecture: The Hard Parts},
  year      = {2021}
}

@book{book:menmonth,
  author    = {Frederick P. Brooks},
  booktitle = {O Mítico Homem-Mês},
  edition   = {15th},
  pages     = {176},
  publisher = {Alta Books},
  title     = {O mítico homem-mês: ensaios sobre engenharia de software},
  year      = {2018}
}

@book{book:refactoring,
  author    = {Martin Fowler},
  edition   = {2th},
  publisher = {Novatec},
  title     = {Refatoração},
  year      = {2020}
}

@book{book:softarch,
  author    = {Mark Richards and Neal Ford},
  edition   = {1th},
  publisher = {O'Reilly},
  title     = {Fundamentals of Software Architecture},
  year      = {2020}
}
@inproceedings{masmali2021code,
  title        = {Code complexity metrics derived from software design: a framework and theoretical evaluation},
  author       = {Masmali, Omar and Badreddin, Omar},
  booktitle    = {Proceedings of the Future Technologies Conference (FTC) 2020, Volume 3},
  pages        = {326--340},
  year         = {2021},
  organization = {Springer}
}

@article{ardito2021evaluation,
  title     = {Evaluation of Rust code verbosity, understandability and complexity},
  author    = {Ardito, Luca and Barbato, Luca and Coppola, Riccardo and Valsesia, Michele},
  journal   = {PeerJ Computer Science},
  volume    = {7},
  pages     = {e406},
  year      = {2021},
  publisher = {PeerJ Inc.}
}

@article{ogunrinde2020performance,
  title   = {Performance Evaluation of a Code Complexity Measurement Tool: An Empirical Approach},
  author  = {Ogunrinde, Mutiat A and Akinola, Solomon O},
  journal = {African Journal of Computing \& ICT},
  volume  = {13},
  number  = {3},
  year    = {2020}
}

@inproceedings{mooij2020reducing,
  title        = {Reducing code complexity through code refactoring and model-based rejuvenation},
  author       = {Mooij, Arjan J and Ketema, Jeroen and Klusener, Steven and Schuts, Mathijs},
  booktitle    = {2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  pages        = {617--621},
  year         = {2020},
  organization = {IEEE}
}

@article{ogunrinde2021multilanguage,
  title   = {A MULTILANGUAGE COMPLEXITY MEASUREMENT TOOL FOR CODE QUALITY ASSESSMENT OF SOFTWARE USING CYCLOMATIC COMPLEXITY APPROACH},
  author  = {OGUNRINDE, MA and AKINOLA, OS},
  journal = {Journal of Natural Sciences Engineering and Technology},
  volume  = {20},
  number  = {1},
  pages   = {24--36},
  year    = {2021}
}

@article{lenarduzzi2023does,
  title   = {Does Cyclomatic or Cognitive Complexity Better Represents Code Understandability? An Empirical Investigation on the Developers Perception},
  author  = {Lenarduzzi, Valentina and Kilamo, Terhi and Janes, Andrea},
  journal = {An Empirical Investigation on the Developers Perception},
  year    = {2023}
}

@inproceedings{hariprasad2017software,
  title        = {Software complexity analysis using halstead metrics},
  author       = {Hariprasad, T and Vidhyagaran, G and Seenu, K and Thirumalai, Chandrasegar},
  booktitle    = {2017 International Conference on Trends in Electronics and Informatics (ICEI)},
  pages        = {1109--1113},
  year         = {2017},
  organization = {IEEE}
}

@article{sharma2020we,
  title   = {Do we need improved code quality metrics?},
  author  = {Sharma, Tushar and Spinellis, Diomidis},
  journal = {arXiv preprint arXiv:2012.12324},
  year    = {2020}
}

@article{muriana2021comparison,
  title   = {Comparison of software complexity of search algorithm using code based complexity metrics},
  author  = {Muriana, Bello and Onuh, O},
  journal = {Int. J. Eng. Appl. Sci. Technol},
  volume  = {6},
  number  = {5},
  pages   = {24--29},
  year    = {2021}
}
